<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="introduction-1"><title>紹介</title>
<conbody><p id="1-i1">
WEBプログラミングが始まって以来、人々は開発プロセスをより快適な物にしようとして来ました。
コミュニティとして私たちは、セキュリティの脅威やHTTPのステートレスな性質、パワフルなWEBアプリケーションを作るのに必要な複数の言語（HTML,CSS,JavaScript） と言った長引く困難を解決しようと新しい技術をプッシュし続けています。
</p><p id="1-i2">
Yesodは、Haskellの強みを活かすことで、WEB開発のプロセスに心の平穏をもたらします。
Haskellの強力なコンパイルの保証は、型だけでなく、参照透明性は意図しない副作用を持っていないことも保証します。
代数型でのパターンマッチングは、可能なすべてのケースを考慮にいれることを保証します。
Haskellでの創造により、すべての分類のバグが消えるでしょう。
</p><p id="1-i3">
残念ながら、Haskellを使用するだけでは不十分です。
WEBは、まさにその性質によって、タイプセーフでは<i id="1-x1">ありません</i>。
最も単純なケースとして、文字列と整数を区別することもできません。WEB上のすべてのデータは生のバイト列として転送されます。私たちの片安全の努力は回避されてしまいます。
すべてのアプリ開発者は、すべての入力を検証するタスクを残されています。
私はこれを <term id="1-x2">境界問題</term>と呼んでいます。アプリケーションが内側で出来るだけ型安全であるために、外の世界との境界はすべて消毒する必要があります。
</p></conbody><concept id="type-safety-2"><title>型安全</title>
<conbody><p id="2-ts1">
Yesodが来ましたよ。
高度な宣言的なテクニックを使用することで、入力の型を正確に指定することができます。
そして、プロセスは、他の用意方法で動作します。型安全URLプロセスを使用して、あなたが出力・送信するデータも正しくフォーマットされることが保証されます。
</p><p id="2-ts2">
境界問題はクライアントとの境界に限りません。データの永続化時にも問題は存在しています。
ここで再び、Yesodはデータのマーシャリングをすることで境界からあなたを守ります。
あなたはは細部まで知らずとも、ハイレベルの定義でエンティティを指定することができます。
</p></conbody></concept>
<concept id="concise-3"><title>簡潔</title><conbody><p id="3-c1">
すべてのアプリケーションについて定型的なコーディングがあることを、我々は知っています。
Yesodは、Haskellの機能を使用し、可能な限り、あなたの指をそのような仕事から救おうとしています：
</p><ul id="3-x1">
<li id="3-x2">フォームライブラリは、アプリカティブ型クラスを活用することで、一般的なケースのコード量を減らします。
</li><li id="3-x3">ルーティングは、型安全性を犠牲にすることなく、非常に簡潔な形式で宣言されています。
</li><li id="3-x4">データベースとのデータのやり取りは、生成されたコードを介して、自動的に処理されます。
</li></ul><p id="3-c2">
Yesodでは、２種類のコード生成があります。
プロジェクトを開始するためには、ファイルとフォルダ構造をセットアップするスキャッフォルディングツールがあります。しかしながら、ほとんどのコード生成はメタプログラミングによってコンパイル時に行われます。
このことは、単純なライブラリのアップデートにより生成されたコードもアップデートされ、生成されたコードが腐ることがないことを意味します。
</p><p id="3-c3">
しかし、制御下に置きたい人のために、そして正確にコードが何をしているか知るために、いつでもrun closer to the compilerし、すべてのコードを自分で書くことができます
</p></conbody></concept>
<concept id="performance-4"><title>パフォーマンス</title><conbody>
<p id="4-p1">
Haskellな主なコンパイラGHCは驚くべきパフォーマンス特性を持っていて、すべての時間を改善します。
この単独の言語選択は、パフォーマンスでの他の製品を超えるアドバンテージをYesodに与えます。
しかしそれだけではなく、パフォーマンスが出るように設計されたアーキテクチャが必要です。
</p><p id="4-p2">
我々のテンプレートへのアプローチが一例です。HTMLとCSS,JavaScriptはコンパイル時に解析され、Yesodは実行時の高コストなディスクIOを避ける事と、このコードのレンダリングを最適化することの両方をしています。
しかし、アーキテクチャの決定は奥深く、貴重なファイルハンドルや他のリソースを消費せず、一定のメモリ使用量でコードが動くよう、基盤ライブラリでConduitやBuilderといった高度な技術を使用している。
ハイレベルな抽象化を提供することで、高圧縮され適切にキャシュされたCSSとJavaScriptを得ることができます。
</p><p id="4-p3">
Yesodの主力のWEBサーバー、その名もWarpは最速のHaskellWEBサーバーです。
これら２つの技術が揃った時、WEBアプリケーションデプロイの最速ソリューションとなります。
</p></conbody></concept>
<concept id="modular-5"><title>モジューラ</title>
<conbody><p id="5-m1">
Yesodは数十のパッケージを生み出してきた、そのうち大半は、Yesod自体とは関係ない所で使用可能です。プロジェクトの１つのゴールはできるだけ多くコミュニティに貢献することです。なので、あなたがもし次のプロジェクトでYesodを使う予定がないとしても、この本の大部分はあなたのニーズに関係しているかもしれません。
</p><p id="5-m2">
もちろんこれらのライブラリは全て上手く結合できるように設計されています。Yesodを使うと様々なAPI全体の一貫性を強く感じることでしょう。
</p></conbody></concept>
<concept id="a-solid-foundation-6"><title>強固な基盤</title><conbody><p id="6-s1">
私はPHPのフレームワークがUTF-8をサポートしたことを宣伝していたことを覚えています。
これには驚くべきことだという印象を受けた。UTF-8のサポートは自動で行われなかったという意味ですか？Haskellの世界では文字エンコーディングのような問題は十分に対処され、完全にサポートされています。
実際に我々は、たいてい逆の問題を抱えている。その問題のための協力でよく設計されたパッケージが数多くあります。Haskellコミュニティは、クリーンであり効果的な解決策を見出す線を引こうと常に挑戦しています。
</p><p id="6-s2">
このような強力なエコシステムの欠点は、選択の複雑さです。
Yesodを使うことで、あなたは殆どのツールを選択できていて、それらが一緒に動くことが保証されています。
もちろん、いつでも自分自身の解決策を持ってくることもできます。
</p><p id="6-s3">
実例として、YesodとHamlet(デフォルトのテンプレート言語)はテキストコンテンツの生成のために<apiname id="6-x1">blaze-builder</apiname>を使っています。この選択はblaze-builderがUTF-8のデータを生成するのに最速のインターフェースを提供するのでなされた。もし、他に<apiname id="6-x2">text</apiname>など偉大なライブラリを使いたいという人がいれば、それを使うのに何も問題ありません。
</p></conbody></concept>
<concept id="introduction-to-haskell-7"><title>Haskellの紹介</title>
<conbody><p id="7-intro1">
Haskellはパワフルで高速、型安全な関数型プログラミング言語です。
この本は、すでにHaskellの基礎の殆どに精通していることを前提としています。
Haskellを学ぶのに素晴らしい２つの本があり、それらはオンラインで読むことができます：
 There are two wonderful books for learning Haskell, both of which are available for reading online:
</p><ul id="7-x1"><li id="7-x2"><xref id="7-x3" href="http://learnyouahaskell.com" scope="external" format="html">Learn You a Haskell for Great Good!</xref></li><li id="7-x4"><xref id="7-x5" href="http://book.realworldhaskell.org/read" scope="external" format="html">Real World Haskell</xref></li></ul><p id="7-intro2">
Yesodはほとんどの入門チュートリアルではカバーしていないHaskellの機能に依存しています。
あなたは殆どの場合それらがどのように動作しているか理解する必要はありませんが、ツールがやっていることをよく理解しようとし始めるには最善の方法です。
これについて次の章で見て行きましょう。
</p></conbody></concept></concept>
