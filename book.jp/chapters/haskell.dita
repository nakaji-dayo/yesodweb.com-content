<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE concept PUBLIC "-//OASIS//DTD DITA Concept//EN" "concept.dtd">
<concept id="haskell-8"><title>Haskell</title><conbody>
  <p id="8-x-3">
Yesodを使用するためには、少なくともHaskellの基本を知っている必要がある。
加えて、Yesodはほとんどの入門書で解説されていない、Haskellの一部の機能も使用しています。
本書は、読者がHaskellに基礎知識を持っていることを前提にしているが、この章はそのギャップを埋めるためのものです。
  </p>
  <p id="8-x-4">
もしあなたがすでにHaskellに堪能であるなら、この章はスキップしていただいて構いません。
もしあなたが、とりあえずYesodを使っていき、徐々に慣れていきたければ、この章はリファレンスとして使うこともできます。
</p>
  <p id="8-x-5">

もしあなたが、もっとっ徹底的なHaskellの解説を探しているなら, Real World HaskellかLearn You a Haskellを進めます。</p>
 </conbody><concept id="terminology-9"><title>用語</title><conbody>
  <p id="9-x-3">
言語としてHaskellに慣れていても、時々、用語についていくつかの混乱があります。
この本を通して使用するいくつかの基本的な用語を確立しておきましょう。
</p>
  <dl id="9-x-4">
   <dlentry id="9-x-5">
    <dt id="9-x-6">データ型</dt>
    <dd id="9-x-7">
これはHaskellのように強い型付けをされた言語の、the core building blocksの１つです。
いくつかのデータ型、例えば<codeph id="9-x-8">Int</codeph>はプリミティブ値として扱えます。一方、他のデータ型はより複雑な値を作るためこれらの上に構築されます。
例えば、あなたはこのように人を表せます:
<codeblock id="9-x-9" outputclass="haskell">data Person = Person Text Int</codeblock>
ここでは<codeph id="9-x-10">Text</codeph>は人の名前を表していて、<codeph id="9-x-11">Int</codeph>は人の年齢を表しています。
そのシンプルさのために、このような具体例は、本を通して繰り返されます。
新しいデータ型を作成する方法は3つあります:
<ul id="9-ul_unf_nuw_ff">
      <li id="9-x-12">
 <codeph id="9-x-14">type GearCount = Int</codeph>のような<codeph id="9-x-13">type</codeph>宣言は、単に既存の型のシノニムを作成します。
このtype宣言は、 <codeph id="9-x-16">GearCount</codeph>求められる場面で、<codeph id="9-x-15">Int</codeph>をして使用することを防ぎません。これを使用することでコードをより自己文書化することができます。
</li>
      <li id="9-x-17">
<codeph id="9-x-19">newtype Make = Make Text</codeph>のような<codeph id="9-x-18">newtype</codeph>宣言。
この場合は、<codeph id="9-x-21">Make</codeph>を使用すべき所で、<codeph id="9-x-20">Text</codeph>を使用することはできません。コンパイルは通りません。
newtypeラッパーはコンパイル時に常に消え、オーバーヘッドはありません。
</li>
      <li id="9-x-22">
上記の<codeph id="9-x-24">Person</codeph>のような<codeph id="9-x-23">data</codeph>宣言。
これは、次のような代数的データ型(ADTs)を作成することができます。
<codeph id="9-x-25">data Vehicle = Bicycle GearCount | Car
        Make Model</codeph>
</li>
     </ul></dd>
   </dlentry>
   <dlentry id="9-x-26">
    <dt id="9-x-27">データコンストラクタ</dt>
    <dd id="9-x-28">
上記までの例において、 <codeph id="9-x-29">Person</codeph>及び<codeph id="9-x-30">Make</codeph>、
      <codeph id="9-x-31">Bicycle</codeph>、<codeph id="9-x-32">Car</codeph>は全てデータコンストラクタにあたります。
</dd>
   </dlentry>
   <dlentry id="9-x-33">
    <dt id="9-x-34">型コンストラクタ</dt>
    <dd id="9-x-35">上記で、<codeph id="9-x-36">Person</codeph>と<codeph id="9-x-37">Make</codeph>、<codeph id="9-x-38">Vehicle</codeph>は全て型コンストラクタです。</dd>
   </dlentry>
   <dlentry id="9-x-39">
    <dt id="9-x-40">型変数</dt>
    <dd id="9-x-41">次のデータ型で考えると <codeph id="9-x-42">data Maybe a = Just a | Nothing</codeph>、<codeph id="9-x-43">a</codeph> が型変数となります。</dd>
   </dlentry>
  </dl>
 </conbody></concept><concept id="tools-10"><title>ツール</title><conbody>
  <p id="10-x-3">
Haskellを開発するのに必要なツールは主に２つあります。
 まずはGlasgow Haskell Compiler (GHC)。これは標準的なHaskellのコンパイラであり、唯一Yesodが公式にサポートしているものです。
そして次に、Haskellの標準的なビルドツールであるCabalが必要になります。
Cabalはローカルのコードをビルドするのに使うだけでなく、HaskellのパッケージレポジトリであるHackageから依存関係を自動ダウンロード・インストールをするのにも使用できます。
</p>
  <p id="10-x-4">あなたはWindowsかMacを使用しているなら、<xref id="10-x-5" href="http://hackage.haskell.org/platform/" format="html" scope="external">Haskell
    Platform</xref>をダウンロードすることを強く進めます。
Linuxにおいては、多くのディストーションがそのレポジトリにHsakell Platformを含んでいます。
例えば、Debianベースのシステムでは、<codeph>sudo
    apt-get install haskell-platform</codeph>を実行することで始めることができます。
もしあなたのディストーションがHaskell Platformを含んでいなくても、Haskell Platformのページにある説明を参考に、手動でインストールすることができます。
</p>
  <p>
１つの重要なツールは<cmdname>alex</cmdname>を更新する必要があるでしょう。
Haskell Platformではバージョン2を含んでいますが、Yesodが使用しているJavaScript圧縮ツール<apiname>hjsmin</apiname>は、バージョン3を必要としています。
Haskell Platformのセットアップとともに
<cmdname>cabal install alex</cmdname>を実行していなければ、実行時に<apiname>language-javascript</apiname>パッケージについてのエラーが発生します。
</p>
  <note>
一部の人達は最先端を生きていて、最新版のGHCをHaskell Platformに取り込まれるより早く使用したがります。
私たちは、現在のすべてのバージョンのGHCでYesodのアップデートを試みてますが、公式にサポートできるのはHaskell Platformのものだけです。
GHCを主導でインストールする方のために、いくつかのメモを記します。
<ul id="10-ul_da4256c1-39b0-4276-8c64-d88825acb6d8">
    <li>
<cmdname>alex</cmdname>や<cmdname>happy</cmdname>といった個々のビルドツールを加えてインストールする必要があります。
</li>
    <li>
<xref id="10-x-12" href="http://www.vex.net/%7Etrebla/haskell/haskell-platform.xhtml" format="html" scope="external">必要なCのライブラリ</xref>全てをインストールしてください。.
Debianベースのシステムで言うと、次のコマンドを実行する必要があります。<codeblock id="10-x-13" outputclass="shell">sudo apt-get install libedit-dev libbsd-dev libgmp3-dev zlib1g-dev freeglut3-dev</codeblock>
    </li>
   </ul></note>
  <p id="10-x-14">
どのようにツールをインストールしたかに関係なく、<codeph id="10-x-15">cabal</codeph>の
   binディレクトリを<codeph id="10-x-16">PATH</codeph>環境変数に加える必要があります。
 MacとLinuxでは
    <codeph id="10-x-17">$HOME/.cabal/bin</codeph>、Windowsでは
   <codeph id="10-x-18">%APPDATA%\cabal\bin</codeph>になるでしょう。
</p>
  <p id="10-x-19">
<codeph id="10-x-20">cabal</codeph>にはたくさんのオプションがありますが、今はちょうど２つのコマンドを試してみましょう。</p>
  <ul id="10-ul_fwo_zrw_ff">
   <li id="10-x-21"><cmdname id="10-x-22">cabal update</cmdname>
はHackageから最新のパッケージリストをダウンロードしてきます。
</li>
   <li id="10-x-23">
<cmdname id="10-x-24">cabal install yesod-platform</cmdname>
はYesodとその依存関係をインストールします。
</li>
  </ul>
  <note id="10-x-25">
コミュニティの多くの人はサンドボックスでのビルドを好んでいます。これはYesodのインストールで既存のパッケージを壊してしまうこと、または将来のインストールでYesodを壊してしまうことを予防します。
これの使い方についてこの本では詳細に触れませんが、2つの最も一般的に使用されるツールは、<xref id="10-x-26" href="http://hackage.haskell.org/package/cabal-dev" format="html" scope="external">cabal-dev</xref>と<xref id="10-x-27" href="http://hackage.haskell.org/package/hsenv" format="html" scope="external">hsenv</xref>です。
</note>
 </conbody></concept><concept id="language-pragmas-11"><title>言語プラグマ</title><conbody>
  <p id="11-x-3">
GHCはデフォルトでHaskell98モードに非常に違い動作をします。
それには、より強力な型クラスや構文の変更などを可能にする多数の言語拡張が同梱されています。
GHCにそれらの拡張を有効にする言を伝える方法は複数あります。
この本でのコード片の多くでは、次のうような<term id="11-x-4">language pragmas</term>が見られます。
</p>
  <codeblock id="11-x-5" outputclass="haskell">{-# LANGUAGE MyLanguageExtension #-}</codeblock>
  <p id="11-x-6">
これらは常にソースコードの先頭に現れます。
加えて、別の2つのアプローチもあります。
</p>
  <ul id="11-ul_ano_hnw_ff">
   <li id="11-x-7">
GHCのコマンドで、追加の引数<userinput id="11-x-8">-XMyLanguageExtension</userinput>を渡す方法。
</li>
   <li id="11-x-9"><codeph id="11-x-10">cabal</codeph>ファイルに、<codeph id="11-x-11">extensions</codeph> ブロックを追加する方法。
</li>
  </ul>
  <p id="11-x-12">
個人的には、GHCコマンドラインに引数を渡す方法は使うことはありません。
個人的な好みではあるが、独自の設定は明らかにファイルに記載しておきたい。
一般的に<codeph id="11-x-13">cabal</codeph>ファイルに拡張を置くことは避けるように推奨されているが、<xref id="11-x-14" href="scaffolding-and-the-site-template.dita#scaffolding-and-the-site-template-166" format="dita">Yesodスキャッフォルディングサイト</xref>では、全てのソースファイルに同じ言語プラグマを書くことを避けるために、この方法を使用しています。
</p>
  <p id="11-x-15">
この本ではかなりの数の言語拡張を使用します（スキャッフォルディングで11個）。
これらのすべての意味の解説はしませんので、<xref id="11-x-16" href="http://www.haskell.org/ghc/docs/latest/html/users_guide/ghc-language-features.html" format="html" scope="external">GHC documentation</xref>
を見てください。
</p>
 </conbody></concept>
<concept id="overloaded-strings-12"><title>オーバーロードされた文字列</title><conbody>
  <p id="12-x-3"><codeph id="12-x-4">"hello"</codeph>の型は何でしょう?
 それは伝統的に<codeph id="12-x-5">String</codeph>であり、このような定義になっています<codeph id="12-x-6">type String = [Char]</codeph>。
残念ながらこれには多くの制約があります。
</p>
  <ul id="12-ul_nev_fdx_ff">
   <li id="12-x-7">
それはテキストデータの非常に効率的な実装です。
各consセルのために余分なメモリを割り当てる必要があり、加えてキャラクターが各ワード単位をフルで専有します。
</li>
   <li id="12-x-8">
しばしば、私たちは実際にはテキストではないが文字列に似たデータを使います。例えば<codeph id="12-x-9">ByteString</codeph>やHTMLといったものです。
</li>
  </ul>
  <p id="12-x-10">
これらの制限を回避するために、GHCには<codeph id="12-x-11">OverloadedStrings</codeph>という拡張があります。
これを有効にすると、文字列リテラルは、<codeph id="12-x-12">String</codeph>という唯一の解釈ではなくなります。
代わりに、<codeph id="12-x-13">IsString a =&gt; a</codeph>という方を持ちます。<codeph id="12-x-14">IsString</codeph>は次の定義です。
  </p>
  <codeblock id="12-x-15" outputclass="haskell">class IsString a where
    fromString :: String -&gt; a</codeblock>
  <p id="12-x-16">
Haskellの型の数に応じて使用可能な<codeph id="12-x-17">IsString</codeph>インスタンスがあります。例えば<codeph id="12-x-18">Text</codeph>(はるかに効率的にパックされた<codeph id="12-x-19">String</codeph>)や<codeph id="12-x-20">ByteString</codeph>、<codeph id="12-x-21">Html</codeph>です。この本の殆どではこの拡張が有効となっていることを前提としています
</p>
  <p id="12-x-22">
残念なことにこの拡張には欠点が一つあり、ときおりGHCの型チェックを混乱させてしまいます。
想像してみましょう。</p>
  <codeblock id="12-x-23" outputclass="haskell">{-# LANGUAGE OverloadedStrings, TypeSynonymInstances, FlexibleInstances #-}
import Data.Text (Text)

class DoSomething a where
    something :: a -&gt; IO ()

instance DoSomething String where
    something _ = putStrLn "String"

instance DoSomething Text where
    something _ = putStrLn "Text"

myFunc :: IO ()
myFunc = something "hello"</codeblock>
  <p id="12-x-24">

この例では、<codeph id="12-x-25">String</codeph>と<codeph id="12-x-26">Text</codeph>のどちらが出力されますか?
それは明確ではありません。
なので、<codeph id="12-x-27">"hello"</codeph>が<codeph id="12-x-28">String</codeph>と<codeph id="12-x-29">Text</codeph>のどちらとして扱われるべきかを指定するに、明示的な型アノテーションを付ける必要があります。
</p>
 </conbody></concept>
<concept id="type-families-13"><title>型族</title><conbody>
  <p id="13-x-3">
型族の基本的な考え方は、2つの違う方の間に何らかの関連性を表そうというものです。
安全にリストの最初の要素を取る関数を書きたいとしましょう。
ただし、私たちはそれをリスト限定のものにはしたくなく、<codeph id="13-x-4">ByteString</codeph>や<codeph id="13-x-5">Word8</codeph>も扱えるのが望ましい。
そうするためには、型の種類の内容が何であるかを指定するために、いくつかの型の関連性というものを導入する必要があります。
</p>
  <codeblock id="13-x-7" outputclass="haskell">{-# LANGUAGE TypeFamilies, OverloadedStrings #-}
import Data.Word (Word8)
import qualified Data.ByteString as S
import Data.ByteString.Char8 () -- get an orphan IsString instance

class SafeHead a where
    type Content a
    safeHead :: a -&gt; Maybe (Content a)

instance SafeHead [a] where
    type Content [a] = a
    safeHead [] = Nothing
    safeHead (x:_) = Just x

instance SafeHead S.ByteString where
    type Content S.ByteString = Word8
    safeHead bs
        | S.null bs = Nothing
        | otherwise = Just $ S.head bs

main :: IO ()
main = do
    print $ safeHead ("" :: String)
    print $ safeHead ("hello" :: String)

    print $ safeHead ("" :: S.ByteString)
    print $ safeHead ("hello" :: S.ByteString)</codeblock>
  <p id="13-x-8">
新しい構文では<codeph id="13-x-10">class</codeph>や<codeph id="13-x-11">instance</codeph>の中で<codeph id="13-x-9">type</codeph>を使用しています.
また、代わりに<codeph id="13-x-12">data</codeph>を使用することもでき、これは既存のものへの参照ではなく新しいデータ型を作ります。
</p>

  <note id="13-x-13">
型クラスのコンテキスト外で、型の関連性を使用する方法は他にもあります。
しかし、Yesodでは、型の関連は、実際の型クラスの部分にあります。
型族の詳細については<xref id="13-x-14" href="http://www.haskell.org/haskellwiki/GHC/Type_families" format="html" scope="external">the Haskell wiki page</xref>を見てください。
</note>
 </conbody></concept>
<concept id="template-haskell-14"><title>Template Haskell</title><conbody>
  <p id="14-x-3">Template Haskell (TH) は<i id="14-x-4">code generation</i>へのアプローチです。
Yesodでは決まり文句を減らし、生成されたコードが正しいことを確認するために多くの場所れこれを使用しています。
 Template Haskellは本質的に、Haskell抽象構文木(AST)を生成するHaskellです。
</p>
  <note id="14-x-5">
実際にはTHには、コードの内部状態を参照するだけでなく、もっと強力な機能があります。しかし、Yesodではそれらは使用しません。
</note>
  <p id="14-x-6">
THのコードを書くことで巧妙なことができますが、残念なことに、型の安全性にほとんど関与しません。
あなたはコンパイルされないコードを生成するTHを簡単に書けてしまいます。
これはYesod開発者だけの問題ではありません。THユーザー全ての問題です。
開発では、生成されたコードが正しいことを確認するのに大規模な単体テストを使用します。
ユーザーとして必要なのはすでに存在する関数を呼び出すことだけです。
例えば、外部で定義されたHamlet Templateを埋め込むには、次のように書きます。
</p>
  <codeblock id="14-x-7" outputclass="haskell">$(hamletFile "myfile.hamlet")</codeblock>
  <p id="14-x-8">
(Hamletについては<xref id="14-x-9" href="shakespearean-templates.dita#shakespearean-templates-27" format="dita">Shakespeareの章</xref>で解説しています) 
括弧が続くドルマークはGHCに以下がTemplate Haskellの関数であることを伝えます。
コードの内側はコンパイラによって実行され、HaskellのASTを生成します。
そして、はい、
    <xref id="14-x-10" href="http://www.yesodweb.com/blog/2010/09/yo-dawg-template-haskell" format="html" scope="external">これでメタプログラミングをすること</xref>も可能です。
</p>
  <p id="14-x-11">
THコードの良いトリックは任意の<codeph id="14-x-12">IO</codeph>アクションの実行が許可されていることで、これにより外部ファイルにいくつかの入力をすることができ、それはコンパイル時に構文解析されます。
一つの使用例は、HTMLとCSS,JavaScriptのコンパイル時チェックをしていることです。
</p>
  <p id="14-x-13">
もしあなたのTemplate Haskellコードが宣言を生成するために使用されていて、かつファイルの一番上に記述する場合は、ドル記号と括弧を省略できます。

 言い換えると、</p>
  <codeblock id="14-x-14" outputclass="haskell">{-# LANGUAGE TemplateHaskell #-}

-- 何も特殊なことはない通常の変数
myFunction = ...

-- 何かしらのTHコードを含む
$(myThCode)

-- または、これでも同じ
myThCode</codeblock>
  <p id="14-x-15">
これはコードがTemplate Haskellによって生成されたものか見分けるのに役立ちます。
GHCのオプションとして<codeph id="14-x-16">-ddump-splices</codeph> を使用する必要があります。
</p>
  <note id="14-x-17">
Template Haskellの更に多くの機能についてここでは触れません。
さらなる情報は
   see the <xref id="14-x-18" href="http://www.haskell.org/haskellwiki/Template_Haskell" format="html" scope="external">Haskell wiki page</xref>を参照してください。
</note>
  <p>
最後にひとつ、
Template Haskellのstage restrictionというものを紹介します。
これはTemplate Haskellの前にkr都合されたコードはTemplate Haskell内のコード、または次の何かを参照できないというものです。
こにより時々、コードを配備し直す必要が出てきます
(--Template Haskell introduces something called the stage restriction, which essentially means that code before a Template Haskell splice cannot refer to code in the Template Haskell, or what follows.
 This will sometimes require you to rearrange your code a bit.)
同じ制限は準クォートにも適用されます。
</p>
 </conbody></concept><concept id="quasi-quotes-15"><title>準クォート</title><conbody>
  <p id="15-x-3">準クォート(QQ)は、Haskellのソースファイル中に任意のコンテンツを埋め込めるようにする、Template Haskellのマイナー拡張です。
例えば、以前に<codeph id="15-x-4">hamletFile</codeph>というTH関数を見せました。これは外部ファイルからテンプレートの内容を読み込んでいました。
私たちは<codeph id="15-x-5">hamlet</codeph>と名付けられた準クォーターを持っています。それはコンテンツをインラインでとってきます。
</p>
  <codeblock id="15-x-6" outputclass="haskell">{-# LANGUAGE QuasiQuotes #-}

[hamlet|&lt;p&gt;This is quasi-quoted Hamlet.|]</codeblock>
  <p id="15-x-7">
構文は角カッコとパイプを使用して区切られています。
角括弧内のパイプので区切られた前半に準クォータの名前が与えられ、後半でコンテンツが与えられています。
</p>
  <p id="15-x-8">
前者はコピペが簡単なので、この本を通して、度々、外部ファイルによる準クォータによるアプローチを使用します。
本番でも、外部ファイルは、HaskellのコードからHaskellの構文じゃないものを分離するための入力の、ほぼ最短の方法として推奨されています。
</p>
 </conbody></concept><concept id="summary-16"><title>まとめ</title><conbody>
  <p id="16-x-3">
Yesodを使用するのにあなたがHaskellの専門家である必要はなく、基礎的な知識で十分です。
この章は本の残りの部分を快適に読み進められるように、ちょうど追加の情報を与えました。
</p>
 </conbody></concept></concept>
